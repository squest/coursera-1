#lang racket

(define (div? a m)
  (zero? (modulo a m)))

(define (inc i)
  (+ 1 i))

(define (dec i)
  (- i 1))

(define (add2 i) (+ i 2))

(define (prime? p)
  (cond ((< p 10) (if (member p (list 2 3 5 7))
                      true 
                      false))
        ((even? p) false)
        (true (if (findf (lambda (x) (div? p x))
                         (range 3 (add2 (sqrt p)) 2))
                  false
                  true))))
